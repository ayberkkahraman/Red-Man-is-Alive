//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Project/InputActions/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Project._Scripts.Runtime.Library.Controller
{
    public partial class @Controller: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controller()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""CharacterControls"",
            ""id"": ""5c9ac20c-2d1f-4dcb-bd62-a4d2c5642666"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""07a51a13-1e3a-4a8f-a4cf-895b15876944"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""69189b78-e127-4cac-9d68-c7c90b6f048a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""6147a8c4-d63a-404e-9bbf-0820eab56eaa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c4c72392-93e9-453e-b07b-eaa818ba442f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""94ad6bd0-aecd-4181-9646-b9a81f441a7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""769853e5-1ab6-4998-85a9-de66c436beac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e9892824-ab9c-4eb6-933a-da0a574b60c6"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""88289e90-7b8e-4b8a-94d0-1203d1a20f2e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a2e0ae46-5bfe-4cc8-9b58-0ce355cabdcb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""edae0153-9e60-4c96-b41c-caa028a16a93"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c72edd93-3a81-415f-8cb8-c079f3439e4e"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8c0eb77-bbfd-47fc-aae8-13a26fe229c0"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3edcc92e-6bc4-416c-964f-59fb7fb534d8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""371a1ace-765e-4706-b267-c62a137f6bca"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21e2e155-aaec-41b0-a8c1-b29da4b2b6da"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bfe7a3b-7fd5-451c-9996-25bf4681fc1d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""096525bb-c661-4d10-8416-59c8d004ee07"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6339b1e0-9ff9-48b0-b46f-caaafea5caed"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec56bd5c-3fae-43a5-8c22-040b7d0b0e16"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraController"",
            ""id"": ""0daa07fd-dc38-42ab-8f97-474d033945c2"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Value"",
                    ""id"": ""ece15a14-216e-4fc1-a637-ec8b14473009"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""787f2f94-ce15-4a95-a63d-2b560deb252b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00783ca4-2483-4cd1-b73b-6129aa6c9d88"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InteractionController"",
            ""id"": ""7030f530-c3f1-400e-83ed-54cd7b9616d4"",
            ""actions"": [
                {
                    ""name"": ""Controller"",
                    ""type"": ""Value"",
                    ""id"": ""c6862ac9-2657-49b2-8df0-885bfbe38ed4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Direction"",
                    ""id"": ""70d634f1-5d32-449a-97ad-76e1c48bdc58"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controller"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4f84847a-6817-4bdb-87ef-c3f6a10e2588"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controller"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""565f5996-61b5-434e-bda3-f83d690dd120"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controller"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CombatController"",
            ""id"": ""96eeb191-fa84-41d8-ac75-9f5e2b5e7acf"",
            ""actions"": [
                {
                    ""name"": ""DrawWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""0606f83e-8b35-45ac-9dd3-f004ca7bbcb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""5bbac129-947b-4629-882c-0f7e4e6de0f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldOnTarget"",
                    ""type"": ""Button"",
                    ""id"": ""74479dcc-ec55-4003-9c3c-9d001b5ac39f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""c61ef437-7df0-4294-85ca-841c46e40d31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""642f980e-a2f5-4734-800a-bf0b361a34d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Takedown"",
                    ""type"": ""Button"",
                    ""id"": ""5a9b9eba-1308-4c16-86a4-bb9945742e2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b88913f6-c52f-4e14-9a6c-102a1cefaab0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrawWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5b1719f-0f0f-4dbf-9614-11bbd1ec91e6"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrawWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b31b8a9-d53f-4990-95cd-84067505fb60"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7b46add-864f-4abb-b181-51fe22cf8e01"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3c118db-99da-4b70-a41b-2e2d98721647"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""019ef860-5fc2-4c68-9ac1-c92f6cde2d93"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdf7ba59-02b0-4261-88e6-ae8d8f3ec0c1"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe46c190-748f-440b-8dc3-41022c54889d"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58ce7785-0b0d-4699-8a2d-29a5c2ce1da4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b78313c2-8607-4aa6-a0a7-23f82c66a46a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""789406b3-04c3-4b12-be41-df67ddc4c424"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Takedown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AimController"",
            ""id"": ""69429c28-3800-4262-92f6-f1942cfe8b0e"",
            ""actions"": [
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Value"",
                    ""id"": ""2fdc41cd-6ca1-477a-8bee-bb1fd656fb5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AimAxisZ"",
                    ""type"": ""Button"",
                    ""id"": ""8d0ab047-0141-4d3d-bd1f-16b4b6ca30f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5c1b4b8d-bd0d-4fee-9fef-373226cfed79"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2681002e-a57e-41c6-bd53-94a1960ed74e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimAxisZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CharacterControls
            m_CharacterControls = asset.FindActionMap("CharacterControls", throwIfNotFound: true);
            m_CharacterControls_Move = m_CharacterControls.FindAction("Move", throwIfNotFound: true);
            m_CharacterControls_Dash = m_CharacterControls.FindAction("Dash", throwIfNotFound: true);
            m_CharacterControls_Interaction = m_CharacterControls.FindAction("Interaction", throwIfNotFound: true);
            m_CharacterControls_Jump = m_CharacterControls.FindAction("Jump", throwIfNotFound: true);
            m_CharacterControls_Run = m_CharacterControls.FindAction("Run", throwIfNotFound: true);
            m_CharacterControls_Crouch = m_CharacterControls.FindAction("Crouch", throwIfNotFound: true);
            // CameraController
            m_CameraController = asset.FindActionMap("CameraController", throwIfNotFound: true);
            m_CameraController_Newaction = m_CameraController.FindAction("New action", throwIfNotFound: true);
            // InteractionController
            m_InteractionController = asset.FindActionMap("InteractionController", throwIfNotFound: true);
            m_InteractionController_Controller = m_InteractionController.FindAction("Controller", throwIfNotFound: true);
            // CombatController
            m_CombatController = asset.FindActionMap("CombatController", throwIfNotFound: true);
            m_CombatController_DrawWeapon = m_CombatController.FindAction("DrawWeapon", throwIfNotFound: true);
            m_CombatController_Attack = m_CombatController.FindAction("Attack", throwIfNotFound: true);
            m_CombatController_HoldOnTarget = m_CombatController.FindAction("HoldOnTarget", throwIfNotFound: true);
            m_CombatController_Dodge = m_CombatController.FindAction("Dodge", throwIfNotFound: true);
            m_CombatController_Block = m_CombatController.FindAction("Block", throwIfNotFound: true);
            m_CombatController_Takedown = m_CombatController.FindAction("Takedown", throwIfNotFound: true);
            // AimController
            m_AimController = asset.FindActionMap("AimController", throwIfNotFound: true);
            m_AimController_Aiming = m_AimController.FindAction("Aiming", throwIfNotFound: true);
            m_AimController_AimAxisZ = m_AimController.FindAction("AimAxisZ", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CharacterControls
        private readonly InputActionMap m_CharacterControls;
        private List<ICharacterControlsActions> m_CharacterControlsActionsCallbackInterfaces = new List<ICharacterControlsActions>();
        private readonly InputAction m_CharacterControls_Move;
        private readonly InputAction m_CharacterControls_Dash;
        private readonly InputAction m_CharacterControls_Interaction;
        private readonly InputAction m_CharacterControls_Jump;
        private readonly InputAction m_CharacterControls_Run;
        private readonly InputAction m_CharacterControls_Crouch;
        public struct CharacterControlsActions
        {
            private @Controller m_Wrapper;
            public CharacterControlsActions(@Controller wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_CharacterControls_Move;
            public InputAction @Dash => m_Wrapper.m_CharacterControls_Dash;
            public InputAction @Interaction => m_Wrapper.m_CharacterControls_Interaction;
            public InputAction @Jump => m_Wrapper.m_CharacterControls_Jump;
            public InputAction @Run => m_Wrapper.m_CharacterControls_Run;
            public InputAction @Crouch => m_Wrapper.m_CharacterControls_Crouch;
            public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
            public void AddCallbacks(ICharacterControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
            }

            private void UnregisterCallbacks(ICharacterControlsActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Dash.started -= instance.OnDash;
                @Dash.performed -= instance.OnDash;
                @Dash.canceled -= instance.OnDash;
                @Interaction.started -= instance.OnInteraction;
                @Interaction.performed -= instance.OnInteraction;
                @Interaction.canceled -= instance.OnInteraction;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Run.started -= instance.OnRun;
                @Run.performed -= instance.OnRun;
                @Run.canceled -= instance.OnRun;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
            }

            public void RemoveCallbacks(ICharacterControlsActions instance)
            {
                if (m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICharacterControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_CharacterControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);

        // CameraController
        private readonly InputActionMap m_CameraController;
        private List<ICameraControllerActions> m_CameraControllerActionsCallbackInterfaces = new List<ICameraControllerActions>();
        private readonly InputAction m_CameraController_Newaction;
        public struct CameraControllerActions
        {
            private @Controller m_Wrapper;
            public CameraControllerActions(@Controller wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_CameraController_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_CameraController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraControllerActions set) { return set.Get(); }
            public void AddCallbacks(ICameraControllerActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraControllerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraControllerActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(ICameraControllerActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(ICameraControllerActions instance)
            {
                if (m_Wrapper.m_CameraControllerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraControllerActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraControllerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraControllerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraControllerActions @CameraController => new CameraControllerActions(this);

        // InteractionController
        private readonly InputActionMap m_InteractionController;
        private List<IInteractionControllerActions> m_InteractionControllerActionsCallbackInterfaces = new List<IInteractionControllerActions>();
        private readonly InputAction m_InteractionController_Controller;
        public struct InteractionControllerActions
        {
            private @Controller m_Wrapper;
            public InteractionControllerActions(@Controller wrapper) { m_Wrapper = wrapper; }
            public InputAction @Controller => m_Wrapper.m_InteractionController_Controller;
            public InputActionMap Get() { return m_Wrapper.m_InteractionController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InteractionControllerActions set) { return set.Get(); }
            public void AddCallbacks(IInteractionControllerActions instance)
            {
                if (instance == null || m_Wrapper.m_InteractionControllerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InteractionControllerActionsCallbackInterfaces.Add(instance);
                @Controller.started += instance.OnController;
                @Controller.performed += instance.OnController;
                @Controller.canceled += instance.OnController;
            }

            private void UnregisterCallbacks(IInteractionControllerActions instance)
            {
                @Controller.started -= instance.OnController;
                @Controller.performed -= instance.OnController;
                @Controller.canceled -= instance.OnController;
            }

            public void RemoveCallbacks(IInteractionControllerActions instance)
            {
                if (m_Wrapper.m_InteractionControllerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInteractionControllerActions instance)
            {
                foreach (var item in m_Wrapper.m_InteractionControllerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InteractionControllerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InteractionControllerActions @InteractionController => new InteractionControllerActions(this);

        // CombatController
        private readonly InputActionMap m_CombatController;
        private List<ICombatControllerActions> m_CombatControllerActionsCallbackInterfaces = new List<ICombatControllerActions>();
        private readonly InputAction m_CombatController_DrawWeapon;
        private readonly InputAction m_CombatController_Attack;
        private readonly InputAction m_CombatController_HoldOnTarget;
        private readonly InputAction m_CombatController_Dodge;
        private readonly InputAction m_CombatController_Block;
        private readonly InputAction m_CombatController_Takedown;
        public struct CombatControllerActions
        {
            private @Controller m_Wrapper;
            public CombatControllerActions(@Controller wrapper) { m_Wrapper = wrapper; }
            public InputAction @DrawWeapon => m_Wrapper.m_CombatController_DrawWeapon;
            public InputAction @Attack => m_Wrapper.m_CombatController_Attack;
            public InputAction @HoldOnTarget => m_Wrapper.m_CombatController_HoldOnTarget;
            public InputAction @Dodge => m_Wrapper.m_CombatController_Dodge;
            public InputAction @Block => m_Wrapper.m_CombatController_Block;
            public InputAction @Takedown => m_Wrapper.m_CombatController_Takedown;
            public InputActionMap Get() { return m_Wrapper.m_CombatController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CombatControllerActions set) { return set.Get(); }
            public void AddCallbacks(ICombatControllerActions instance)
            {
                if (instance == null || m_Wrapper.m_CombatControllerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CombatControllerActionsCallbackInterfaces.Add(instance);
                @DrawWeapon.started += instance.OnDrawWeapon;
                @DrawWeapon.performed += instance.OnDrawWeapon;
                @DrawWeapon.canceled += instance.OnDrawWeapon;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @HoldOnTarget.started += instance.OnHoldOnTarget;
                @HoldOnTarget.performed += instance.OnHoldOnTarget;
                @HoldOnTarget.canceled += instance.OnHoldOnTarget;
                @Dodge.started += instance.OnDodge;
                @Dodge.performed += instance.OnDodge;
                @Dodge.canceled += instance.OnDodge;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
                @Takedown.started += instance.OnTakedown;
                @Takedown.performed += instance.OnTakedown;
                @Takedown.canceled += instance.OnTakedown;
            }

            private void UnregisterCallbacks(ICombatControllerActions instance)
            {
                @DrawWeapon.started -= instance.OnDrawWeapon;
                @DrawWeapon.performed -= instance.OnDrawWeapon;
                @DrawWeapon.canceled -= instance.OnDrawWeapon;
                @Attack.started -= instance.OnAttack;
                @Attack.performed -= instance.OnAttack;
                @Attack.canceled -= instance.OnAttack;
                @HoldOnTarget.started -= instance.OnHoldOnTarget;
                @HoldOnTarget.performed -= instance.OnHoldOnTarget;
                @HoldOnTarget.canceled -= instance.OnHoldOnTarget;
                @Dodge.started -= instance.OnDodge;
                @Dodge.performed -= instance.OnDodge;
                @Dodge.canceled -= instance.OnDodge;
                @Block.started -= instance.OnBlock;
                @Block.performed -= instance.OnBlock;
                @Block.canceled -= instance.OnBlock;
                @Takedown.started -= instance.OnTakedown;
                @Takedown.performed -= instance.OnTakedown;
                @Takedown.canceled -= instance.OnTakedown;
            }

            public void RemoveCallbacks(ICombatControllerActions instance)
            {
                if (m_Wrapper.m_CombatControllerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICombatControllerActions instance)
            {
                foreach (var item in m_Wrapper.m_CombatControllerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CombatControllerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CombatControllerActions @CombatController => new CombatControllerActions(this);

        // AimController
        private readonly InputActionMap m_AimController;
        private List<IAimControllerActions> m_AimControllerActionsCallbackInterfaces = new List<IAimControllerActions>();
        private readonly InputAction m_AimController_Aiming;
        private readonly InputAction m_AimController_AimAxisZ;
        public struct AimControllerActions
        {
            private @Controller m_Wrapper;
            public AimControllerActions(@Controller wrapper) { m_Wrapper = wrapper; }
            public InputAction @Aiming => m_Wrapper.m_AimController_Aiming;
            public InputAction @AimAxisZ => m_Wrapper.m_AimController_AimAxisZ;
            public InputActionMap Get() { return m_Wrapper.m_AimController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(AimControllerActions set) { return set.Get(); }
            public void AddCallbacks(IAimControllerActions instance)
            {
                if (instance == null || m_Wrapper.m_AimControllerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_AimControllerActionsCallbackInterfaces.Add(instance);
                @Aiming.started += instance.OnAiming;
                @Aiming.performed += instance.OnAiming;
                @Aiming.canceled += instance.OnAiming;
                @AimAxisZ.started += instance.OnAimAxisZ;
                @AimAxisZ.performed += instance.OnAimAxisZ;
                @AimAxisZ.canceled += instance.OnAimAxisZ;
            }

            private void UnregisterCallbacks(IAimControllerActions instance)
            {
                @Aiming.started -= instance.OnAiming;
                @Aiming.performed -= instance.OnAiming;
                @Aiming.canceled -= instance.OnAiming;
                @AimAxisZ.started -= instance.OnAimAxisZ;
                @AimAxisZ.performed -= instance.OnAimAxisZ;
                @AimAxisZ.canceled -= instance.OnAimAxisZ;
            }

            public void RemoveCallbacks(IAimControllerActions instance)
            {
                if (m_Wrapper.m_AimControllerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IAimControllerActions instance)
            {
                foreach (var item in m_Wrapper.m_AimControllerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_AimControllerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public AimControllerActions @AimController => new AimControllerActions(this);
        public interface ICharacterControlsActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnInteraction(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
        }
        public interface ICameraControllerActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
        public interface IInteractionControllerActions
        {
            void OnController(InputAction.CallbackContext context);
        }
        public interface ICombatControllerActions
        {
            void OnDrawWeapon(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnHoldOnTarget(InputAction.CallbackContext context);
            void OnDodge(InputAction.CallbackContext context);
            void OnBlock(InputAction.CallbackContext context);
            void OnTakedown(InputAction.CallbackContext context);
        }
        public interface IAimControllerActions
        {
            void OnAiming(InputAction.CallbackContext context);
            void OnAimAxisZ(InputAction.CallbackContext context);
        }
    }
}
